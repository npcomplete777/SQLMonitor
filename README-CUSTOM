Title: Arbitrary SQL Monitor for AppDynamics 
Author: Aaron Jacobs aaron.jacobs@appdynamics.com Date: 10 April 2015
Arbitrary SQL Monitor for AppDynamics
An AppDynamics Machine Agent extension to run SQL statements against a JDBC database, and import the results of the query as custom metrics in AppDynamics.
Sample use cases:
Import business metrics and KPI's from an application database.
Import performance data from SolarWinds or other system monitors that use an RDBMS backend.
This extension requires the Java Machine Agent.
Installation
Download ArbitrarySQLMonitor.zip from the Community site.
Copy ArbitrarySQLMonitor.zip into the directory where you installed the machine agent, under $AGENT_HOME/monitors.
Unzip the file. This will create a new directory called ArbitrarySQLMonitor.
In $AGENT_HOME/monitors/ArbitrarySQLMonitor, edit the file monitor.xml and configure the plugin.
Copy your JDBC driver jarfile into $AGENT_HOME/monitors/ArbitrarySQLMonitor/lib.  The extension is pre-configured with an MS SQL driver.
Restart the machine agent.
Configuration
Requirement - no duplicate data.  
Set the below argument name for "machineAgent-relativePath" to the relative path of the MachineAgent folder location.  For example:
<argument name="machineAgent-relativePath" is-required="false" default-value="c:\\MA5\\MachineAgent"/>

Set the time in timeStamp.txt located in the ArbitrarySqlMonitor folder to the most current date/time in this format:
2015-07-06T20:20:10.777-05:00
Be specific to the minute when re-configuring.  This file is written to with the date/time of execution of the queries each time they run.  If duplicate data is detected, this date/time in the file and the current date/time are subtracted from each other and the difference is passed into the queries where freqInSec is specified in the queries for a single cycle.

Go to monitor.xml to the 'task-arguments' tag and find this tag within it:
argument name="execution_freq_in_secs"
*You must set this field equal to whatever value is configured for the 'execution-frequency-in-seconds' field within the same file.
Next set 
argument name="timeper_in_sec"
This is the value, in seconds, that will replace the variable 
freqInSec 
within the SQL queries in config.yml.

*Note: ALWAYS set "timeper_in_sec" LESS THAN  "execution_freq_in_secs"
This ensures no duplicate data.

For example, you would put "freqInSec" in each SQL query to replace the time, in seconds, that you wish to run the query for:
DATEADD(ss, -freqInSec, GETDATE()))

Note: If freqInSec is left out of the SQL queries in config.yml, the extension will run as designed and simply not modify any queries nor validate for duplicate data.

Configuration for this monitor is in the monitor.xml and yml.config files in the monitor directory.
Note-Please make sure to not use tab (\t) while editing yaml files. You may want to validate the yaml file using a yaml validator http://yamllint.com/
1. Configure the SQL server instances by editing the config.yaml file in `<MACHINE_AGENT_HOME>/monitors/SQLMonitor/`. Below is the format
server - The SQL server name
driver - The class name of the JDBC driver to use e.g. com.mysql.jdbc.Driver
connectionString - The connection URL for the driver e.g. jdbc:mysql://localhost:3306/demo
user - The user name to connect as
password - The password for the user
 
metricPrefix: "Custom Metrics|SQL|"
2. Configure the path to the config.yaml file by editing the <task-arguments> in the monitor.xml file. Below is the sample   
<task-arguments>          <!-- config file-->            <argument name="config-file" is-required="true" default-value="monitors/SQLMonitor/config.yml"     />          .... </task-arguments>  


JDBC Driver 
To use this extension, you will need to provide the JDBC driver, class name, and connection URL. We've provided examples for some of the common databases. You'll need to replace the placeholders (HOST, PORT, DB, etc.) in the URL with your own values.
Metrics Provided
The metrics created by this extension depend on the query you provide. The column names will be used as the metric names, and the first column of each row will be used as a folder name.
For example, the query SELECT "A", 3 as "B" would create a new metric folder called A, with a new metric B whose value would be 3.
The extension also creates three metrics with information about the query itself:
Connection Time (ms) : Time required to open a database connection and change catalogs, in milliseconds.
Execution Time (ms) : Time required to execute the query and fetch all result rows, in milliseconds.
Rows Returned : Total number of rows returned by the query.
See "Example Usage" below for a concrete example.
Restrictions
The first column is assumed to be a string. All other columns are assumed to be long integers.
Multiple result sets are not supported.
Example Usage
Here's a sample query that runs against an AppDynamics controller and reports some data about the applications registered with the controller.
    SELECT a.name AS "Name",            count(DISTINCT mm.node_id) AS "Node Count",            count(*) AS "Metric Count"     FROM metricdata_min mm     JOIN application a ON (a.id = mm.application_id)     WHERE mm.ts_min =         (SELECT max(ts_min) - 1          FROM metricdata_min)     GROUP BY 1     ORDER BY 1
That query will return results something like this:
 
Name	Node Count	Metric Count	   
ACME Book Store	3	42591	   
Bundy Shoes	7	72390	   
Big Deal Retail	6	65440	 
You would configure the extension like this in your monitor.xml:
        <task-arguments>             <argument name="driver-class" is-required="false" default-value="com.mysql.jdbc.Driver" />             <argument name="url" is-required="true" default-value="jdbc:mysql://CONTROLLER:3306/controller" />             <argument name="username" is-required="false" default-value="root"/>             <argument name="password" is-required="false" default-value="PASSWORD"/>             <argument name="sql" is-required="false" default-value="SELECT a.name AS &quot;Name&quot;, count(DISTINCT mm.node_id) AS &quot;Node Count&quot;, count(*) AS &quot;Metric Count&quot; FROM metricdata_min mm JOIN application a ON (a.id = mm.application_id) WHERE mm.ts_min = (SELECT max(ts_min) - 1 FROM metricdata_min) GROUP BY 1 ORDER BY 1"/>         </task-arguments>         <java-task>             <classpath>SqlMonitor.jar:lib/commons-lang-2.4.jar:lib/commons-logging-1.1.1.jar:lib/machineagent.jar:lib/mysql-connector-java-5.1.17-bin.jar</classpath>             <impl-class>com.singularity.ee.agent.systemagent.monitors.ArbitrarySqlMonitor</impl-class>         </java-task>
(Note that I have used MySQL-specific settings for the driver class, driver JAR, and JDBC URL.)
When this extension runs the query and processes the results, it will create new metrics in your Metric Browser as follows:
- Application Infrastructure   - MyTier     - Custom Metrics       - SQL Monitor         - ACME Book Store             Node Count             Metric Count         - Bundy Shoes             Node Count             Metric Count         - Big Deal Retail             Node Count             Metric Count           Connection Time (ms)           Execution Time (ms)           Rows Returned 
Support
For any questions or feature requests, please contact the AppDynamics Center of Excellence.
Version: 1.0
Controller Compatibility: 3.6 or later
Last Updated: 10-June-2015
Author: Aaron Jacobs
Contributing
Always feel free to fork and contribute any changes directly via GitHub.
Community
Find out more at our Community site.

Release Notes
Version 1.0
Initial release.
